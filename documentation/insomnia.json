{"_type":"export","__export_format":4,"__export_date":"2022-08-28T13:11:09.869Z","__export_source":"insomnia.desktop.app:v2022.5.1","resources":[{"_id":"req_795c08a1dd9f4ad9a8d84775b5db371d","parentId":"fld_9888339b5f2f4ab3a647177af96df57a","modified":1661653003036,"created":1661356518651,"url":"localhost:4000/api/v1/admin/courses/6303a30701e40360761cac72","name":"Admin Get Courses by lecturer","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661652971537,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_9888339b5f2f4ab3a647177af96df57a","parentId":"fld_8df07f0af4ae4e0eb59d31e68fbe670f","modified":1661652974802,"created":1661652958284,"name":"Admin","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1661652971462,"_type":"request_group"},{"_id":"fld_8df07f0af4ae4e0eb59d31e68fbe670f","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661301962662,"created":1661301962662,"name":"Courses","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1661301962662,"_type":"request_group"},{"_id":"wrk_291328e74d6d42dc87ef67526d80f962","parentId":null,"modified":1661097359288,"created":1661097359288,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_ebe64a6b84394a948e524d2d371075a9","parentId":"fld_9888339b5f2f4ab3a647177af96df57a","modified":1661653010900,"created":1661359139452,"url":"localhost:4000/api/v1/admin/courses","name":"Admin Get all Courses","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661652971512,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_93f19993a6484cc3a0c0d1a7f9a01f31","parentId":"fld_9888339b5f2f4ab3a647177af96df57a","modified":1661652990436,"created":1661338168954,"url":"localhost:4000/api/v1/admin/addCourse","name":"Admin add Course","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"lecturer\": \"Dr. Great Nwamadi\",\n\t\"staffId\": \"StaffID101\",\n\t\"courseTitle\" : \"Introduction to Web Dev\",\n\t\"courseCode\": \"SENG102\",\n\t\"courseDepartment\": \"Software Engineering.\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_9501c8b5037a42e8825932811945aaf6"}],"authentication":{},"metaSortKey":-1661652971487,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_01c6a224524e43a8ae80d2113dead77e","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661684930984,"created":1661684816345,"url":"localhost:4000/api/v1/lecturer/remove/63064dfb5af07ddbf0c86df1/student/62fe2f1244bc730a0cc67bbf","name":"Remove Student from course","description":"","method":"PUT","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661684816345,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_d5c1aaab4ab042938426d1c828374a0a","parentId":"fld_8df07f0af4ae4e0eb59d31e68fbe670f","modified":1661652964666,"created":1661652964666,"name":"Lecturer","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1661652964666,"_type":"request_group"},{"_id":"req_a97adb12e9f242bc8a1af2c87f3d4461","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661684086908,"created":1661683989016,"url":"localhost:4000/api/v1/lecturer/students/remove-all/6306a9cdb628347b159cbf1c","name":"Remove Students from course","description":"","method":"PUT","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661683989016,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_062bbeaebc33446394252b1c4fe81f68","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661682859023,"created":1661656671702,"url":"localhost:4000/api/v1/lecturer/edit-attendance/63064dfb5af07ddbf0c86df1","name":"Edit Student Attendance","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"studentId\": \"63039be47e824c30ccf87511\",\n\t\"studentMatricNo\": \"19/2330\",\n\t\"incrementAttendanceScore\": 1\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_2ecb36cf11fe4a6dac5ed396546fa68f"}],"authentication":{},"metaSortKey":-1661656671702,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3978765ba40c4f409db9cd8c2da875b1","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661682857812,"created":1661653161959,"url":"localhost:4000/api/v1/lecturer/set-attendance-num/63064dfb5af07ddbf0c86df1","name":"Set attendance num for course for a semester","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"attendanceNum\": \"25\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_bf15c9317c4c43799c5e890857746ff8"}],"authentication":{},"metaSortKey":-1661653161959,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_03770cb1d23f4943ae65b8b80bb80c4d","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661654137478,"created":1661403077674,"url":"localhost:4000/api/v1/lecturer/get/course/63064dfb5af07ddbf0c86df1","name":"Lecturer view single course","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661649800457.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f7a8f0fb4cb34102891cf18560c4c4b1","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661653533260,"created":1661350037973,"url":"localhost:4000/api/v1/lecturer/get/courses","name":"Get all Lecturer course(s)","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661649800420,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a90392e5dd484c1a8411f536d492caf7","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661679693828,"created":1661640307632,"url":"localhost:4000/api/v1/lecturer/courses/63064dfb5af07ddbf0c86df1/attendance/6303a32701e40360761cac76","name":"Lecturer get attendance for a particular student for a course","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661649800407.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_73f994039c664173bb299ea4b229cdc2","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661685243997,"created":1661359869190,"url":"localhost:4000/api/v1/lecturer/add/studentToCourse","name":"Lecturer Add student to course","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"courseCode\": \"Test101\",\n\t\"studentMatricNo\": \"19/2655\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_f820ce65c9e240e0a4ebc3c7f1578ab1"}],"authentication":{},"metaSortKey":-1661649800357.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_56c5b6467b4048249060177baed030a4","parentId":"fld_d5c1aaab4ab042938426d1c828374a0a","modified":1661686714479,"created":1661377461977,"url":"localhost:4000/api/v1/lecturer/course/OpenAttendance/63064dfb5af07ddbf0c86df1","name":"Lecturer enable/disable attendance for a course","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"canSubmitAttendance\": true,\n\t\"latitude\": \"41.408\",\n\t\"longitude\": \"87.00\"\n\t\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_dd21fce150c74afeb9619ab1eab4c0fe"}],"authentication":{},"metaSortKey":-1661649800307.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_6a415fda56c64f948b0c225a59fa4162","parentId":"fld_37c36e1096de4b589f259b884a0e6fdb","modified":1661691130762,"created":1661404685489,"url":"localhost:4000/api/v1/student/course/submitAttendance","name":"Student Submit Attendance","description":"","method":"POST","body":{"mimeType":"multipart/form-data","params":[{"name":"courseCode","value":"Test101","id":"pair_f4f801aa647f48cb9d03844fb570c840"},{"id":"pair_f7b136fc0d114d749c83ee68337d5083","name":"latitude","value":"41.4074","description":""},{"id":"pair_12065ff2e18745dfb1913362a1c3ddd7","name":"longitude","value":"86.9996","description":""},{"id":"pair_620cda9cd90d47bd90f61ae9b3a79e8d","name":"studentPicture","value":"","description":"","type":"file","fileName":"C:\\Users\\NGO\\Downloads\\bu_logo_main_2.jpg"}]},"parameters":[],"headers":[{"name":"Content-Type","value":"multipart/form-data","id":"pair_4d017ffe09bd47319a8caa4844cfd567"}],"authentication":{},"metaSortKey":-1661525660819,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_37c36e1096de4b589f259b884a0e6fdb","parentId":"fld_8df07f0af4ae4e0eb59d31e68fbe670f","modified":1661652977663,"created":1661652971412,"name":"Student","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1661646636149,"_type":"request_group"},{"_id":"req_271b75d41d504b4794d448a195ab2487","parentId":"fld_37c36e1096de4b589f259b884a0e6fdb","modified":1661653069021,"created":1661415492700,"url":"localhost:4000/api/v1/student/course/submitAttendance","name":"Student Submit Attendance 2","description":"","method":"POST","body":{"mimeType":"multipart/form-data","params":[{"name":"courseCode","value":"Test201","id":"pair_f4f801aa647f48cb9d03844fb570c840"},{"id":"pair_f7b136fc0d114d749c83ee68337d5083","name":"latitude","value":"25.50","description":""},{"id":"pair_12065ff2e18745dfb1913362a1c3ddd7","name":"longitude","value":"10.00","description":""},{"id":"pair_620cda9cd90d47bd90f61ae9b3a79e8d","name":"studentPicture","value":"","description":"","type":"file","fileName":"C:\\Users\\NGO\\Downloads\\bu_logo_main_2.jpg"}]},"parameters":[],"headers":[{"name":"Content-Type","value":"multipart/form-data","id":"pair_4d017ffe09bd47319a8caa4844cfd567"}],"authentication":{},"metaSortKey":-1661525660769,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ceb83e280ffa4ea3981312b25162b072","parentId":"fld_37c36e1096de4b589f259b884a0e6fdb","modified":1661653076645,"created":1661402271918,"url":"localhost:4000/api/v1/student/view/course/63064dfb5af07ddbf0c86df1","name":"Student view single course","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661525660744,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a6e73bc2aa2949288f99cb6e972c339a","parentId":"fld_37c36e1096de4b589f259b884a0e6fdb","modified":1661653079839,"created":1661380773488,"url":"localhost:4000/api/v1/student/view/courses","name":"Student view his/her courses","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661525660731.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_043be89fff2c455483d002b873c5b7de","parentId":"fld_8df07f0af4ae4e0eb59d31e68fbe670f","modified":1661684074109,"created":1661403371687,"url":"localhost:4000/api/v1/course/6306a9cdb628347b159cbf1c","name":"Get course by id","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661403371687,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_47458e90b8eb44a79b543f373b3e18a3","parentId":"fld_ed24b41c3a1b450a8a2d75ee0a00f540","modified":1661400465967,"created":1661176287442,"url":"localhost:4000/api/v1/lecturer/editPassword/62fcf83775e53f8f88f19f6d","name":"Lecturer Update Password","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"currentPassword\":\"NewPassword\",\n\t\"newPassword\": \"TestPassword\",\n\t\"confirmPassword\": \"TestPassword\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_32610f2ec3f24a72849f134e36bfd6fb"}],"authentication":{},"metaSortKey":-1661176287442,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_ed24b41c3a1b450a8a2d75ee0a00f540","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661151929768,"created":1661151929768,"name":"Lecturer","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1661151929768,"_type":"request_group"},{"_id":"req_2b3820d308ba493ca1e38919fdf56bed","parentId":"fld_ed24b41c3a1b450a8a2d75ee0a00f540","modified":1661152050087,"created":1661151961962,"url":"localhost:4000/api/v1/lecturer/62fcf83775e53f8f88f19f6d","name":"Get Lecturer by id","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661151961962,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_6378c2d6cb9d452183930d8d3e500627","parentId":"fld_ed24b41c3a1b450a8a2d75ee0a00f540","modified":1661151949682,"created":1661097821725,"url":"localhost:4000/api/v1/lecturers","name":"Get all Lecturers","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_3a60efc3f3244100acc6fb6267d40758","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjE5LzI2NzYiLCJ1c2VyX2lkIjoiNjJmY2Y4Mzc3NWU1M2Y4Zjg4ZjE5ZjZkIiwicm9sZSI6ImxlY3R1cmVyIiwiaWF0IjoxNjYxMDk3NzkzLCJleHAiOjE2NjExMDQ5OTN9.bVprMQeSVjcfDs_6JMH5NsOjGEjyMw_IbUdjZ2s_CBc","disabled":true},"metaSortKey":-1661097821725,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_55fceee5496f43bbb8541adff9d5b489","parentId":"fld_aa8dc392beab4b9a8f64c153d9f4abb0","modified":1661383510023,"created":1661294960922,"url":"localhost:4000/api/v1/student/editPassword/62fe2f1244bc730a0cc67bbf","name":"Student Update Password","description":"","method":"PUT","body":{"mimeType":"application/json","text":""},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1661294960922,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_aa8dc392beab4b9a8f64c153d9f4abb0","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661149609733,"created":1661149609733,"name":"Student","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1661149609733,"_type":"request_group"},{"_id":"req_cf92ef0e1cf4480c8b704e509184ecad","parentId":"fld_aa8dc392beab4b9a8f64c153d9f4abb0","modified":1661151920363,"created":1661151835402,"url":"localhost:4000/api/v1/students","name":"Get all students","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661151835402,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_12f5be2005be4f6f95c06e70374cf12b","parentId":"fld_aa8dc392beab4b9a8f64c153d9f4abb0","modified":1661383083581,"created":1661150868260,"url":"localhost:4000/api/v1/student/62fe2f1244bc730a0cc67bbf","name":"Get Student by Id","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661150868260,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_145b0af8a9824cca8190f0de1cb0f805","parentId":"fld_aa8dc392beab4b9a8f64c153d9f4abb0","modified":1661150863511,"created":1661150793285,"url":"localhost:4000/api/v1/students/level/300","name":"Get all students by level","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661150793285,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_eaf151b3e8e941de86ff7260c3c3870a","parentId":"fld_aa8dc392beab4b9a8f64c153d9f4abb0","modified":1661150787776,"created":1661149612510,"url":"localhost:4000/api/v1/students/department/Software Engineering","name":"Get all students by department","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661149612510,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_75aacc6b5b11430eb00ce6ca0da769d9","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661295144894,"created":1661295117932,"url":"localhost:4000/api/v1/admin/current","name":"Get Admin Info","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661295117932,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_442911fd5a21409caa83cff88acf72e5","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661149537264,"created":1661149537264,"name":"Admin","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1661149537264,"_type":"request_group"},{"_id":"req_fb4d83ca4eac43788a71a874760f8972","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661457241212,"created":1661101788312,"url":"localhost:4000/api/v1/auth/admin/register","name":"Admin Register","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"firstname\": \"Great\",\n\t\"lastname\": \"Admin\",\n\t\"email\": \"greatnwamadi@gmail.com\",\n\t\"idNum\": \"Admin101\",\n\t\"role\": \"admin\",\n\t\"password\": \"Admin@2022\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_dee79add94d94b4cab11a7fecadbc320"}],"authentication":{},"metaSortKey":-1661294437025,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7b45425d43b949e99af39bf927504c54","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661457493528,"created":1661101806827,"url":"localhost:4000/api/v1/admin/login","name":"Admin Login","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"idNum\": \"Admin101\",\n\t\"password\": \"Admin@2022\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_d71fe78a04c24886b38966362917e83a"}],"authentication":{"type":"bearer"},"metaSortKey":-1661294436975,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_41ca81fccf4748b6aafccc422471caea","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661457544168,"created":1661294308789,"url":"localhost:4000/api/v1/auth/admin/update/password","name":"Admin Update Password","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"currentPassword\": \"Admin@2022\",\n\t\"newPassword\" : \"Admin@2022\",\n\t\"confirmPassword\" : \"Admin@2022\"\n\t\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_0f8d8683965242f7b428ce621755205c"}],"authentication":{},"metaSortKey":-1661294436950,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_10db7f6737c149e9a9ce13cbbfae7eea","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661345064396,"created":1661292539546,"url":"localhost:4000/api/v1/admin/forgotPassword","name":"Admin Forgot Password","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"email\": \"greatnwamadi@gmail.com\",\n\t\"role\": \"admin\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_bfc347843f834fddbbce2c442d3d6641"}],"authentication":{},"metaSortKey":-1661294436937.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_46b073121044432d8f4d0d47b4f411b4","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661345074266,"created":1661292882734,"url":"localhost:4000/api/v1/admin/reset/password/630564e70ad578b47633e573","name":"Admin Reset Password","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\t\"idNum\": \"Admin101\",\n\t\"newPassword\": \"Admin@2022\",\n\t\"confirmPassword\": \"Admin@2022\"\n\t\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_9fef06fdb933471b869cb0482e32dab9"}],"authentication":{},"metaSortKey":-1661294436931.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f47273d625eb45e5a846ec13b54117c1","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661294519573,"created":1661294436925,"url":"localhost:4000/api/v1/auth/admin/delete","name":"Admin Delete Account","description":"","method":"DELETE","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661294436925,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_bc567f7c7699448c8be2ebb421e025e2","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661457503172,"created":1661104926504,"url":"localhost:4000/api/v1/admin/addLecturer","name":"Admin Add Lecturer","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"firstname\": \"Dr. Great\",\n\t\"lastname\": \"Nwamadi\",\n\t\"email\": \"nwamadigreat@gmail.com\",\n\t\"password\": \"GreatisStillTesting\",\n\t\"idNum\": \"StaffID101\",\n\t\"role\": \"lecturer\",\n\t\"department\": \"Software Engineering\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5211251b6039412294e5327045ad4c51"}],"authentication":{},"metaSortKey":-1661105513580,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_706550d83ce24c2a92c977aec5e3ff5c","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661345337963,"created":1661296677777,"url":"localhost:4000/api/v1/admin/editLecturer/62fcf83775e53f8f88f19f6d","name":"Admin Edit Lecturer","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"firstname\": \"Ebere\",\n\t\"lastname\": \"Nwachukwu\",\n\t\"department\": \"Software Engineering\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_49afac8015a9455db31f21f49527d468"}],"authentication":{},"metaSortKey":-1661105513567.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_034d849a55624d7d861564ce22d9316f","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661297328693,"created":1661106145076,"url":"localhost:4000/api/v1/admin/delete/lecturer","name":"Admin Delete Lecturer","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"idNum\": \"StaffID100\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_be79aa98d6594a4f80395195322860c2"}],"authentication":{},"metaSortKey":-1661105513555,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a0990b6fc1ef4d119309ff945575f99d","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661457529615,"created":1661103051232,"url":"localhost:4000/api/v1/admin/addStudent","name":"Admin Add Student","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"firstname\": \"TestUser\",\n\t\"lastname\": \"User\",\n\t\"email\": \"test@gmail.com\",\n\t\"password\": \"Password\",\n\t\"idNum\": \"22/0000\",\n\t\"role\": \"student\",\n\t\"department\": \"SE\",\n\t\"level\": 300\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5211251b6039412294e5327045ad4c51"}],"authentication":{},"metaSortKey":-1661105513530,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_72c9ca61d90d4c49a6f0494e4a161f24","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661296700714,"created":1661295172782,"url":"localhost:4000/api/v1/admin/editStudent/63039be47e824c30ccf87511","name":"Admin Edit Student","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"firstname\": \"Greatman\",\n\t\"lastname\": \"Idoko\",\n\t\"department\": \"Software Engineering\",\n\t\"level\": 400\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_02cd8ad031684747b40c6c16f432daed"}],"authentication":{},"metaSortKey":-1661105513505,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f5b3bf43be0d488d8f5547e77d0656aa","parentId":"fld_442911fd5a21409caa83cff88acf72e5","modified":1661297543026,"created":1661105513480,"url":"localhost:4000/api/v1/admin/delete/student","name":"Admin Delete Student","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"idNum\": \"22/0000\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_be79aa98d6594a4f80395195322860c2"}],"authentication":{},"metaSortKey":-1661105513480,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3555be7cab9144978afaec0c94f0eb7f","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661339179608,"created":1661097882925,"url":"localhost:4000/api/v1/logout","name":"Logout","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1661097882925,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b8e5aa6c35ee4e6492274d7295b727a8","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661345700454,"created":1661149461732,"url":"localhost:4000/api/v1/forgotPassword","name":"Student/Lecturer Forgot Password","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"email\":\"nwamadigreat@gmail.com\",\n\t\"role\": \"lecturer\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_49019b5ef5cb43cda1b9eea5fd4229a7"}],"authentication":{},"metaSortKey":-1661097752023.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2cfb7075d4ab43c2b0943a0f5e783431","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661532144840,"created":1661291436334,"url":"localhost:4000/api/v1/reset/password/6303ad12956afd41727e505b","name":"Student/Lecturer Reset Password","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"newPassword\": \"Owen2022\",\n\t\"confirmPassword\": \"Owen2022\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_3d281450df184cd0afca93df802d3f73"}],"authentication":{},"metaSortKey":-1661097621122,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_55c6db5cd2e54d988ca99d83854dcda2","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661687053424,"created":1661097359319,"url":"localhost:4000/api/v1/login","name":"Student/Lecturer Login","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"idNum\": \"StaffID101\",\n\t\"password\": \"GreatisStillTesting\",\n\t\"role\": \"lecturer\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5fcd1c01ea304616b685d0ab659c66d7"}],"authentication":{},"metaSortKey":-1661097359319,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5c659c1a736d418f94943660bc694c6c","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661687054345,"created":1661381319558,"url":"localhost:4000/api/v1/login","name":"Student/Lecturer Login (To test for student)","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"idNum\": \"19/2330\",\n\t\"password\": \"Password\",\n\t\"role\": \"student\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_5fcd1c01ea304616b685d0ab659c66d7"}],"authentication":{},"metaSortKey":-1661097359269,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_c2965285958686cb258859aa23fe4074e74beb5c","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661097359309,"created":1661097359309,"name":"Base Environment","data":{"base_url":"{{ scheme }}://{{ host }}{{ base_path }}"},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1661097359309,"_type":"environment"},{"_id":"jar_c2965285958686cb258859aa23fe4074e74beb5c","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661687060038,"created":1661097359314,"name":"Default Jar","cookies":[{"key":"authToken","value":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjE5LzIzMzAiLCJ1c2VyX2lkIjoiNjMwMzliZTQ3ZTgyNGMzMGNjZjg3NTExIiwicm9sZSI6InN0dWRlbnQiLCJpYXQiOjE2NjE2ODcwNjAsImV4cCI6MTY2MTY5NDI2MH0.Z3DGO9IgBaMfNJ0AWE8xcYV9LpW_ljwCddZfSEprr2k","expires":"2022-08-29T11:44:20.000Z","maxAge":86400,"domain":"localhost","path":"/","httpOnly":true,"hostOnly":true,"creation":"2022-08-21T16:01:42.172Z","lastAccessed":"2022-08-28T11:44:20.038Z","id":"1269855984447461"},{"key":"authToken","value":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IkFkbWluMTAxIiwidXNlcl9pZCI6IjYzMDNiMmFjODMwYmNlNDM2OTU4NmM4ZCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY2MTI4NjA2NywiZXhwIjoxNjYxMjkzMjY3fQ.3tcKGZjuSXNfwRMUR35vG-J9syDoR5f7Paz5imWjt8E","expires":"2022-08-24T20:21:07.000Z","maxAge":86400,"domain":"buattendancemanagementsystem.herokuapp.com","path":"/","secure":true,"httpOnly":true,"hostOnly":true,"creation":"2022-08-22T16:45:47.719Z","lastAccessed":"2022-08-23T20:21:06.589Z","id":"9522654914041258"}],"_type":"cookie_jar"},{"_id":"spc_9e882443c518487db8e73bacefff3e47","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661286411035,"created":1661097359303,"fileName":"Attendance-Management-System","contents":"# openapi: 3.0.0\n# info:\n#   description: \"This is a sample server Petstore server.  You can find out more about\n#     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n#     #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n#     `special-key` to test the authorization filters.\"\n#   version: 1.0.2\n#   title: Swagger Petstore\n#   termsOfService: http://swagger.io/terms/\n#   contact:\n#     email: apiteam@swagger.io\n#   license:\n#     name: Apache 2.0\n#     url: http://www.apache.org/licenses/LICENSE-2.0.html\n# tags:\n#   - name: pet\n#     description: Everything about your Pets\n#     externalDocs:\n#       description: Find out more\n#       url: http://swagger.io\n#   - name: store\n#     description: Access to Petstore orders\n#   - name: user\n#     description: Operations about user\n#     externalDocs:\n#       description: Find out more about our store\n#       url: http://swagger.io\n# paths:\n#   /pet:\n#     post:\n#       tags:\n#         - pet\n#       summary: Add a new pet to the store\n#       description: \"\"\n#       operationId: addPet\n#       requestBody:\n#         $ref: \"#/components/requestBodies/Pet\"\n#       responses:\n#         \"405\":\n#           description: Invalid input\n#     put:\n#       tags:\n#         - pet\n#       summary: Update an existing pet\n#       description: \"\"\n#       operationId: updatePet\n#       requestBody:\n#         $ref: \"#/components/requestBodies/Pet\"\n#       responses:\n#         \"400\":\n#           description: Invalid ID supplied\n#         \"404\":\n#           description: Pet not found\n#         \"405\":\n#           description: Validation exception\n#   /pet/findByStatus:\n#     get:\n#       tags:\n#         - pet\n#       summary: Finds Pets by status\n#       description: Multiple status values can be provided with comma separated strings\n#       operationId: findPetsByStatus\n#       parameters:\n#         - name: status\n#           in: query\n#           description: Status values that need to be considered for filter\n#           required: true\n#           explode: true\n#           schema:\n#             type: array\n#             items:\n#               type: string\n#               enum:\n#                 - available\n#                 - pending\n#                 - sold\n#               default: available\n#       responses:\n#         \"200\":\n#           description: successful operation\n#           content:\n#             application/xml:\n#               schema:\n#                 type: array\n#                 items:\n#                   $ref: \"#/components/schemas/Pet\"\n#             application/json:\n#               schema:\n#                 type: array\n#                 items:\n#                   $ref: \"#/components/schemas/Pet\"\n#         \"400\":\n#           description: Invalid status value\n#   /pet/findByTags:\n#     get:\n#       tags:\n#         - pet\n#       summary: Finds Pets by tags\n#       description: Multiple tags can be provided with comma separated strings. Use tag1,\n#         tag2, tag3 for testing.\n#       operationId: findPetsByTags\n#       parameters:\n#         - name: tags\n#           in: query\n#           description: Tags to filter by\n#           required: true\n#           explode: true\n#           schema:\n#             type: array\n#             items:\n#               type: string\n#       responses:\n#         \"200\":\n#           description: successful operation\n#           content:\n#             application/xml:\n#               schema:\n#                 type: array\n#                 items:\n#                   $ref: \"#/components/schemas/Pet\"\n#             application/json:\n#               schema:\n#                 type: array\n#                 items:\n#                   $ref: \"#/components/schemas/Pet\"\n#         \"400\":\n#           description: Invalid tag value\n#       deprecated: true\n#   \"/pet/{petId}\":\n#     get:\n#       tags:\n#         - pet\n#       summary: Find pet by ID\n#       description: Returns a single pet\n#       operationId: getPetById\n#       parameters:\n#         - name: petId\n#           in: path\n#           description: ID of pet to return\n#           required: true\n#           schema:\n#             type: integer\n#             format: int64\n#       responses:\n#         \"200\":\n#           description: successful operation\n#           content:\n#             application/xml:\n#               schema:\n#                 $ref: \"#/components/schemas/Pet\"\n#             application/json:\n#               schema:\n#                 $ref: \"#/components/schemas/Pet\"\n#         \"400\":\n#           description: Invalid ID supplied\n#         \"404\":\n#           description: Pet not found\n#     post:\n#       tags:\n#         - pet\n#       summary: Updates a pet in the store with form data\n#       description: \"\"\n#       operationId: updatePetWithForm\n#       parameters:\n#         - name: petId\n#           in: path\n#           description: ID of pet that needs to be updated\n#           required: true\n#           schema:\n#             type: integer\n#             format: int64\n#       requestBody:\n#         content:\n#           application/x-www-form-urlencoded:\n#             schema:\n#               type: object\n#               properties:\n#                 name:\n#                   description: Updated name of the pet\n#                   type: string\n#                 status:\n#                   description: Updated status of the pet\n#                   type: string\n#       responses:\n#         \"405\":\n#           description: Invalid input\n#     delete:\n#       tags:\n#         - pet\n#       summary: Deletes a pet\n#       description: \"\"\n#       operationId: deletePet\n#       parameters:\n#         - name: api_key\n#           in: header\n#           required: false\n#           schema:\n#             type: string\n#         - name: petId\n#           in: path\n#           description: Pet id to delete\n#           required: true\n#           schema:\n#             type: integer\n#             format: int64\n#       responses:\n#         \"400\":\n#           description: Invalid ID supplied\n#         \"404\":\n#           description: Pet not found\n#   /store/inventory:\n#     get:\n#       tags:\n#         - store\n#       summary: Returns pet inventories by status\n#       description: Returns a map of status codes to quantities\n#       operationId: getInventory\n#       responses:\n#         \"200\":\n#           description: successful operation\n#           content:\n#             application/json:\n#               schema:\n#                 type: object\n#                 additionalProperties:\n#                   type: integer\n#                   format: int32\n#   /store/order:\n#     post:\n#       tags:\n#         - store\n#       summary: Place an order for a pet\n#       description: \"\"\n#       operationId: placeOrder\n#       requestBody:\n#         content:\n#           application/json:\n#             schema:\n#               $ref: \"#/components/schemas/Order\"\n#         description: order placed for purchasing the pet\n#         required: true\n#       responses:\n#         \"200\":\n#           description: successful operation\n#           content:\n#             application/xml:\n#               schema:\n#                 $ref: \"#/components/schemas/Order\"\n#             application/json:\n#               schema:\n#                 $ref: \"#/components/schemas/Order\"\n#         \"400\":\n#           description: Invalid Order\n#   \"/store/order/{orderId}\":\n#     get:\n#       tags:\n#         - store\n#       summary: Find purchase order by ID\n#       description: For valid response try integer IDs with value >= 1 and <= 10. Other\n#         values will generated exceptions\n#       operationId: getOrderById\n#       parameters:\n#         - name: orderId\n#           in: path\n#           description: ID of pet that needs to be fetched\n#           required: true\n#           schema:\n#             type: integer\n#             format: int64\n#             minimum: 1\n#             maximum: 10\n#       responses:\n#         \"200\":\n#           description: successful operation\n#           content:\n#             application/xml:\n#               schema:\n#                 $ref: \"#/components/schemas/Order\"\n#             application/json:\n#               schema:\n#                 $ref: \"#/components/schemas/Order\"\n#         \"400\":\n#           description: Invalid ID supplied\n#         \"404\":\n#           description: Order not found\n#     delete:\n#       tags:\n#         - store\n#       summary: Delete purchase order by ID\n#       description: For valid response try integer IDs with positive integer value. Negative\n#         or non-integer values will generate API errors\n#       operationId: deleteOrder\n#       parameters:\n#         - name: orderId\n#           in: path\n#           description: ID of the order that needs to be deleted\n#           required: true\n#           schema:\n#             type: integer\n#             format: int64\n#             minimum: 1\n#       responses:\n#         \"400\":\n#           description: Invalid ID supplied\n#         \"404\":\n#           description: Order not found\n#   /user:\n#     post:\n#       tags:\n#         - user\n#       summary: Create user\n#       description: This can only be done by the logged in user.\n#       operationId: createUser\n#       requestBody:\n#         content:\n#           application/json:\n#             schema:\n#               $ref: \"#/components/schemas/User\"\n#         description: Created user object\n#         required: true\n#       responses:\n#         default:\n#           description: successful operation\n#   /user/createWithArray:\n#     post:\n#       tags:\n#         - user\n#       summary: Creates list of users with given input array\n#       description: \"\"\n#       operationId: createUsersWithArrayInput\n#       requestBody:\n#         $ref: \"#/components/requestBodies/UserArray\"\n#       responses:\n#         default:\n#           description: successful operation\n#   /user/createWithList:\n#     post:\n#       tags:\n#         - user\n#       summary: Creates list of users with given input array\n#       description: \"\"\n#       operationId: createUsersWithListInput\n#       requestBody:\n#         $ref: \"#/components/requestBodies/UserArray\"\n#       responses:\n#         default:\n#           description: successful operation\n#   /user/login:\n#     get:\n#       tags:\n#         - user\n#       summary: Logs user into the system\n#       description: \"\"\n#       operationId: loginUser\n#       parameters:\n#         - name: username\n#           in: query\n#           description: The user name for login\n#           required: true\n#           schema:\n#             type: string\n#         - name: password\n#           in: query\n#           description: The password for login in clear text\n#           required: true\n#           schema:\n#             type: string\n#       responses:\n#         \"200\":\n#           description: successful operation\n#           headers:\n#             X-Rate-Limit:\n#               description: calls per hour allowed by the user\n#               schema:\n#                 type: integer\n#                 format: int32\n#             X-Expires-After:\n#               description: date in UTC when token expires\n#               schema:\n#                 type: string\n#                 format: date-time\n#           content:\n#             application/xml:\n#               schema:\n#                 type: string\n#             application/json:\n#               schema:\n#                 type: string\n#         \"400\":\n#           description: Invalid username/password supplied\n#   /user/logout:\n#     get:\n#       tags:\n#         - user\n#       summary: Logs out current logged in user session\n#       description: \"\"\n#       operationId: logoutUser\n#       responses:\n#         default:\n#           description: successful operation\n#   \"/user/{username}\":\n#     get:\n#       tags:\n#         - user\n#       summary: Get user by user name\n#       description: \"\"\n#       operationId: getUserByName\n#       parameters:\n#         - name: username\n#           in: path\n#           description: \"The name that needs to be fetched. Use user1 for testing. \"\n#           required: true\n#           schema:\n#             type: string\n#       responses:\n#         \"200\":\n#           description: successful operation\n#           content:\n#             application/xml:\n#               schema:\n#                 $ref: \"#/components/schemas/User\"\n#             application/json:\n#               schema:\n#                 $ref: \"#/components/schemas/User\"\n#         \"400\":\n#           description: Invalid username supplied\n#         \"404\":\n#           description: User not found\n#     put:\n#       tags:\n#         - user\n#       summary: Updated user\n#       description: This can only be done by the logged in user.\n#       operationId: updateUser\n#       parameters:\n#         - name: username\n#           in: path\n#           description: name that need to be updated\n#           required: true\n#           schema:\n#             type: string\n#       requestBody:\n#         content:\n#           application/json:\n#             schema:\n#               $ref: \"#/components/schemas/User\"\n#         description: Updated user object\n#         required: true\n#       responses:\n#         \"400\":\n#           description: Invalid user supplied\n#         \"404\":\n#           description: User not found\n#     delete:\n#       tags:\n#         - user\n#       summary: Delete user\n#       description: This can only be done by the logged in user.\n#       operationId: deleteUser\n#       parameters:\n#         - name: username\n#           in: path\n#           description: The name that needs to be deleted\n#           required: true\n#           schema:\n#             type: string\n#       responses:\n#         \"400\":\n#           description: Invalid username supplied\n#         \"404\":\n#           description: User not found\n# externalDocs:\n#   description: Find out more about Swagger\n#   url: http://swagger.io\n# servers:\n#   - url: https://petstore.swagger.io/v2\n# components:\n#   requestBodies:\n#     UserArray:\n#       content:\n#         application/json:\n#           schema:\n#             type: array\n#             items:\n#               $ref: \"#/components/schemas/User\"\n#       description: List of user object\n#       required: true\n#     Pet:\n#       content:\n#         application/json:\n#           schema:\n#             $ref: \"#/components/schemas/Pet\"\n#         application/xml:\n#           schema:\n#             $ref: \"#/components/schemas/Pet\"\n#       description: Pet object that needs to be added to the store\n#       required: true\n#   schemas:\n#     Order:\n#       type: object\n#       properties:\n#         _id:\n#           type: integer\n#           format: int64\n#         petId:\n#           type: integer\n#           format: int64\n#         quantity:\n#           type: integer\n#           format: int32\n#         shipDate:\n#           type: string\n#           format: date-time\n#         status:\n#           type: string\n#           description: Order Status\n#           enum:\n#             - placed\n#             - approved\n#             - delivered\n#         complete:\n#           type: boolean\n#           default: false\n#       xml:\n#         name: Order\n#     User:\n#       type: object\n#       properties:\n#         id:\n#           type: integer\n#           format: int64\n#         username:\n#           type: string\n#         firstName:\n#           type: string\n#         lastName:\n#           type: string\n#         email:\n#           type: string\n#         password:\n#           type: string\n#         phone:\n#           type: string\n#         userStatus:\n#           type: integer\n#           format: int32\n#           description: User Status\n#       xml:\n#         name: User\n#     Category:\n#       type: object\n#       properties:\n#         id:\n#           type: integer\n#           format: int64\n#         name:\n#           type: string\n#       xml:\n#         name: Category\n#     Tag:\n#       type: object\n#       properties:\n#         id:\n#           type: integer\n#           format: int64\n#         name:\n#           type: string\n#       xml:\n#         name: Tag\n#     Pet:\n#       type: object\n#       required:\n#         - name\n#         - photoUrls\n#       properties:\n#         id:\n#           type: integer\n#           format: int64\n#         category:\n#           $ref: \"#/components/schemas/Category\"\n#         name:\n#           type: string\n#           example: doggie\n#         photoUrls:\n#           type: array\n#           xml:\n#             name: photoUrl\n#             wrapped: true\n#           items:\n#             type: string\n#         tags:\n#           type: array\n#           xml:\n#             name: tag\n#             wrapped: true\n#           items:\n#             $ref: \"#/components/schemas/Tag\"\n#         status:\n#           type: string\n#           description: pet status in the store\n#           enum:\n#             - available\n#             - pending\n#             - sold\n#       xml:\n#         name: Pet\n#     ApiResponse:\n#       type: object\n#       properties:\n#         code:\n#           type: integer\n#           format: int32\n#         type:\n#           type: string\n#         message:\n#           type: string\n          \nopenapi: 3.0.0\ninfo:\n  description: \"Attendance management system built. Case study - Babcock university. Link -\n    Swagger at [https://buattendancemanagementsystem.herokuapp.com](https://buattendancemanagementsystem.herokuapp.com/)\"\n  version: 1.0.0\n  title: Attendance Management System\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: ngotechdev@gmail.com\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        _id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"},{"_id":"uts_1ff23056e50844f6991c71d7e34da297","parentId":"wrk_291328e74d6d42dc87ef67526d80f962","modified":1661097359321,"created":1661097359321,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"env_env_c2965285958686cb258859aa23fe4074e74beb5c_sub","parentId":"env_c2965285958686cb258859aa23fe4074e74beb5c","modified":1661113272659,"created":1661113272659,"name":"OpenAPI env","data":{"scheme":"https","base_path":"/v2","host":"petstore.swagger.io"},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1661113272659,"_type":"environment"}]}